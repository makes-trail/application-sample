service: mt-sample

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${opt:profile, self:custom.defaultProfile}
  region: us-west-2
  apiName: mt-sample-${self:provider.stage}-api
  endpointType: REGIONAL
  logRetentionInDays: 30
  versionFunctions: false
  timeout: 20
  deploymentBucket:
    name: mt-sample-${self:provider.stage}-deployment
  iam:
    role: myDefaultRole

#--------------------------------------------------------------------------------
# packaging
# https://www.serverless.com/framework/docs/providers/aws/guide/packaging/
#--------------------------------------------------------------------------------
package:
  individually: true

#--------------------------------------------------------------------------------
# plugins
# https://www.serverless.com/framework/docs/providers/aws/guide/plugins/
#--------------------------------------------------------------------------------
plugins:
  - serverless-python-requirements

#--------------------------------------------------------------------------------
# variables
# https://www.serverless.com/framework/docs/providers/aws/guide/variables/
#--------------------------------------------------------------------------------
custom:
  defaultStage: dev
  defaultProfile: default
  dynamedbTableName: mt-sample-dev

layers:
  requirements:
    package:
      artifact: layers/artifact/requirements.zip
    compatibleRuntimes:
      - python3.8
    retain: false

#--------------------------------------------------------------------------------
# functions
# https://www.serverless.com/framework/docs/providers/aws/guide/functions/
#--------------------------------------------------------------------------------
functions:
  hello:
    handler: handler.hello
    package:
      exclude:
        - '**'
      include:
        - handler.py
  fetch-openbd-summary:
    handler: main.handler
    layers:
      - !Ref RequirementsLambdaLayer
    events:
      - http:
          path: /fetch/{isbn}
          method: get
          cors: true
    package:
      artifact: functions/artifact/fetch_openbd_summary.zip
  save-openbd-to-ddb:
    handler: main.handler
    layers:
      - !Ref RequirementsLambdaLayer
    environment:
      DYNAMODB_TABLE: ${self:custom.dynamedbTableName}
    events:
      - http:
          path: /save-openbd/{isbn}
          method: put
          cors: true
    package:
      artifact: functions/artifact/save_openbd_to_ddb.zip
  save-gbooks-to-ddb:
    handler: main.handler
    layers:
      - !Ref RequirementsLambdaLayer
    environment:
      DYNAMODB_TABLE: ${self:custom.dynamedbTableName}
    events:
      - http:
          path: /save-gbooks/{isbn}
          method: put
          cors: true
    package:
      artifact: functions/artifact/save_gbooks_to_ddb.zip

#--------------------------------------------------------------------------------
# resources
# https://www.serverless.com/framework/docs/providers/aws/guide/resources/
#--------------------------------------------------------------------------------
resources:
  Resources:
    myDefaultRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: mt-sample-${self:provider.stage}-lambdaDefaultRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: mt-sample-${self:provider.stage}-lambdaDefaultPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - !Ref AWS::Region
                        - !Ref AWS::AccountId
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DeleteNetworkInterface
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:dynamodb'
                        - !Ref AWS::Region
                        - !Ref AWS::AccountId
                        - 'table:*'
