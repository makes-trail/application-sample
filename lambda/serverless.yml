service: mt-sample

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${opt:profile, self:custom.defaultProfile}
  region: us-west-2
  apiName: ${self:service}-${self:provider.stage}-api
  endpointType: REGIONAL
  logRetentionInDays: 30
  versionFunctions: false
  timeout: 20
  deploymentBucket:
    name: ${self:service}-${self:provider.stage}-lambda-deployment
    serverSideEncryption: AES256
  iam:
    role: myDefaultRole

#--------------------------------------------------------------------------------
# packaging
# https://www.serverless.com/framework/docs/providers/aws/guide/packaging/
#--------------------------------------------------------------------------------
package:
  individually: true

#--------------------------------------------------------------------------------
# variables
# https://www.serverless.com/framework/docs/providers/aws/guide/variables/
#--------------------------------------------------------------------------------
custom:
  defaultStage: dev
  defaultProfile: default
  dynamedbTableName: mt-sample-dev
  # VPC
  vpcId: ${ssm:vpc}
  subnetA: ${ssm:private-subnet-a}
  subnetB: ${ssm:private-subnet-b}
  # Security Group
  lambdaSecurityGroup: ${ssm:security-group-for-lambda}
  # RDS
  rdsHost: ${ssm:/rds/dev/host}
  rdsUser: ${ssm:/rds/${self:provider.stage}/user}
  rdsPassword: ${ssm:/rds/${self:provider.stage}/password}
  rdsDatabase: ${ssm:/rds/${self:provider.stage}/database}

#--------------------------------------------------------------------------------
# layers
# https://www.serverless.com/framework/docs/providers/aws/guide/layers/
#--------------------------------------------------------------------------------
layers:
  Requirements:
    package:
      artifact: layers/artifact/requirements.zip
    compatibleRuntimes:
      - python3.8
    retain: false
  MtSampleCommon:
    package:
      artifact: layers/artifact/mt_sample_common.zip
    compatibleRuntimes:
      - python3.8
    retain: false

#--------------------------------------------------------------------------------
# functions
# https://www.serverless.com/framework/docs/providers/aws/guide/functions/
#--------------------------------------------------------------------------------
functions:
  hello:
    handler: handler.hello
    package:
      exclude:
        - "**"
      include:
        - handler.py
  fetch-openbd-summary:
    handler: main.handler
    layers:
      - { Ref: RequirementsLambdaLayer }
      - { Ref: MtSampleCommonLambdaLayer }
    events:
      - http:
          path: /fetch/{isbn}
          method: get
          cors: true
    package:
      artifact: functions/artifact/fetch_openbd_summary.zip
  save-openbd-to-ddb:
    handler: main.handler
    layers:
      - { Ref: RequirementsLambdaLayer }
      - { Ref: MtSampleCommonLambdaLayer }
    environment:
      DYNAMODB_TABLE: ${self:custom.dynamedbTableName}
    events:
      - http:
          path: /save-openbd/{isbn}
          method: put
          cors: true
    package:
      artifact: functions/artifact/save_openbd_to_ddb.zip
  save-gbooks-to-ddb:
    handler: main.handler
    layers:
      - { Ref: RequirementsLambdaLayer }
      - { Ref: MtSampleCommonLambdaLayer }
    environment:
      DYNAMODB_TABLE: ${self:custom.dynamedbTableName}
    events:
      - http:
          path: /save-gbooks/{isbn}
          method: put
          cors: true
    package:
      artifact: functions/artifact/save_gbooks_to_ddb.zip
  save-book-to-rds:
    handler: main.handler
    layers:
      - { Ref: RequirementsLambdaLayer }
      - { Ref: MtSampleCommonLambdaLayer }
    environment:
      DYNAMODB_TABLE: ${self:custom.dynamedbTableName}
      RDS_HOST: ${self:custom.rdsHost}
      RDS_USER: ${self:custom.rdsUser}
      RDS_PASSWORD: ${self:custom.rdsPassword}
      RDS_DATABASE: ${self:custom.rdsDatabase}
    vpc:
      securityGroupIds:
        - ${self:custom.lambdaSecurityGroup}
      subnetIds:
        - ${self:custom.subnetA}
        - ${self:custom.subnetB}
    package:
      artifact: functions/artifact/save_book_to_rds.zip
  invoke-save-book:
    handler: main.handler
    layers:
      - { Ref: RequirementsLambdaLayer }
      - { Ref: MtSampleCommonLambdaLayer }
    environment:
      CHILD_FUNCTION_NAME: ${self:service}-${self:provider.stage}-save-book-to-rds
    events:
      - http:
          path: /save/{isbn}
          method: put
          cors: true
    package:
      artifact: functions/artifact/invoke_save_book.zip
  list-books:
    handler: main.handler
    layers:
      - { Ref: RequirementsLambdaLayer }
      - { Ref: MtSampleCommonLambdaLayer }
    environment:
      RDS_HOST: ${self:custom.rdsHost}
      RDS_USER: ${self:custom.rdsUser}
      RDS_PASSWORD: ${self:custom.rdsPassword}
      RDS_DATABASE: ${self:custom.rdsDatabase}
    vpc:
      securityGroupIds:
        - ${self:custom.lambdaSecurityGroup}
      subnetIds:
        - ${self:custom.subnetA}
        - ${self:custom.subnetB}
    events:
      - http:
          path: /list
          method: get
          cors: true
    package:
      artifact: functions/artifact/list_books.zip

#--------------------------------------------------------------------------------
# resources
# https://www.serverless.com/framework/docs/providers/aws/guide/resources/
#--------------------------------------------------------------------------------
resources:
  Resources:
    myDefaultRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${self:provider.stage}-lambdaDefaultRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: ${self:service}-${self:provider.stage}-lambdaDefaultPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:logs"
                          - { Ref: AWS::Region }
                          - { Ref: AWS::AccountId }
                          - "log-group:/aws/lambda/*:*:*"
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DeleteNetworkInterface
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:dynamodb"
                          - { Ref: AWS::Region }
                          - { Ref: AWS::AccountId }
                          - "table/*"
