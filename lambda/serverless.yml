service: mt-sample

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${opt:profile, self:custom.defaultProfile}
  region: us-west-2
  stackName: ${self:service}-${self:provider.stage}-serverless
  apiName: ${self:service}-${self:provider.stage}-api
  endpointType: REGIONAL
  logRetentionInDays: 30
  versionFunctions: false
  timeout: 30
  deploymentBucket:
    name: ${self:service}-${self:provider.stage}-lambda-deployment
    serverSideEncryption: AES256
  iam:
    role: myDefaultRole

#--------------------------------------------------------------------------------
# packaging
# https://www.serverless.com/framework/docs/providers/aws/guide/packaging/
#--------------------------------------------------------------------------------
package:
  individually: true

#--------------------------------------------------------------------------------
# variables
# https://www.serverless.com/framework/docs/providers/aws/guide/variables/
#--------------------------------------------------------------------------------
custom:
  defaultStage: dev
  defaultProfile: default
  # VPC
  vpcId: ${ssm:vpc}
  subnetA: ${ssm:private-subnet-a}
  subnetB: ${ssm:private-subnet-b}
  # Security Group
  lambdaSecurityGroup: ${ssm:security-group-for-lambda}
  # RDS
  rdsHost: ${ssm:/${self:service}/${self:provider.stage}/rds/host}
  rdsUser: ${ssm:/${self:service}/${self:provider.stage}/rds/user}
  rdsPassword: ${ssm:/${self:service}/${self:provider.stage}/rds/password}
  rdsDatabase: ${ssm:/${self:service}/${self:provider.stage}/rds/database}

#--------------------------------------------------------------------------------
# layers
# https://www.serverless.com/framework/docs/providers/aws/guide/layers/
#--------------------------------------------------------------------------------
layers:
  MtSampleDatabase:
    name: ${self:service}-${self:provider.stage}-database-layer
    package:
      artifact: layers/artifact/mt_sample_database.zip
    compatibleRuntimes:
      - python3.8
    retain: false
  MtSampleDomain:
    name: ${self:service}-${self:provider.stage}-domain-layer
    package:
      artifact: layers/artifact/mt_sample_domain.zip
    compatibleRuntimes:
      - python3.8
    retain: false
  MtSampleUsecase:
    name: ${self:service}-${self:provider.stage}-usecase-layer
    package:
      artifact: layers/artifact/mt_sample_usecase.zip
    compatibleRuntimes:
      - python3.8
    retain: false

#--------------------------------------------------------------------------------
# functions
# https://www.serverless.com/framework/docs/providers/aws/guide/functions/
#--------------------------------------------------------------------------------
functions:
  search-book:
    handler: main.handler
    package:
      artifact: functions/artifact/search_book.zip
    description: ISBNをもとに書籍APIから取得した書籍情報を返す
    layers:
      - !Ref MtSampleDomainLambdaLayer
    events:
      - http:
          path: /search/{isbn}
          method: get
  save-book:
    handler: main.handler
    package:
      artifact: functions/artifact/save_book.zip
    description: 書籍情報をRDSへ保存する
    layers:
      - !Ref MtSampleDatabaseLambdaLayer
      - !Ref MtSampleDomainLambdaLayer
      - !Ref MtSampleUsecaseLambdaLayer
    environment:
      RDS_HOST: ${self:custom.rdsHost}
      RDS_USER: ${self:custom.rdsUser}
      RDS_PASSWORD: ${self:custom.rdsPassword}
      RDS_DATABASE: ${self:custom.rdsDatabase}
    vpc:
      securityGroupIds:
        - ${self:custom.lambdaSecurityGroup}
      subnetIds:
        - ${self:custom.subnetA}
        - ${self:custom.subnetB}
    events:
      - http:
          path: /save
          method: put
  list-books:
    handler: main.handler
    package:
      artifact: functions/artifact/list_books.zip
    description: RDSに保存されている全ての書籍情報をリストにして返す
    layers:
      - !Ref MtSampleDatabaseLambdaLayer
      - !Ref MtSampleDomainLambdaLayer
      - !Ref MtSampleUsecaseLambdaLayer
    environment:
      RDS_HOST: ${self:custom.rdsHost}
      RDS_USER: ${self:custom.rdsUser}
      RDS_PASSWORD: ${self:custom.rdsPassword}
      RDS_DATABASE: ${self:custom.rdsDatabase}
    vpc:
      securityGroupIds:
        - ${self:custom.lambdaSecurityGroup}
      subnetIds:
        - ${self:custom.subnetA}
        - ${self:custom.subnetB}
    events:
      - http:
          path: /list
          method: get

#--------------------------------------------------------------------------------
# resources
# https://www.serverless.com/framework/docs/providers/aws/guide/resources/
#--------------------------------------------------------------------------------
resources:
  Resources:
    myDefaultRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${self:provider.stage}-lambdaDefaultRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: ${self:service}-${self:provider.stage}-lambdaDefaultPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:logs"
                          - !Ref AWS::Region
                          - !Ref AWS::AccountId
                          - "log-group:/aws/lambda/*:*:*"
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DetachNetworkInterface
                    - ec2:DeleteNetworkInterface
                  Resource: "*"
    parameterApiEndpoint:
      Type: AWS::SSM::Parameter
      Properties:
        Description: デプロイされたステージのAPIエンドポイント
        Type: String
        Name: /${self:service}/${self:provider.stage}/apigw/domain
        Value:
          "Fn::Join":
            - ""
            - - !Ref ApiGatewayRestApi
              - ".execute-api."
              - ${self:provider.region}
              - ".amazonaws.com"
